.iconArray.relative<
  - %w(collection wishlist giveaway).each do |name|
    =link_to collect_path(@polish.id, box: name), method: :post, remote: true do
      <svg  id='#{name}List' class='icon iPolish #{name if name == 'wishlist'} hoverBack'><use xlink:href='##{name}' /></svg>
      <svg class='icon isOk button roundButton check' #{"style='display:none'" unless current_user.boxes.find_by(slug: name).box_items.detect{|item| item.polish_id == @polish.id} }><use xlink:href='#check' /></svg>
  .switchWrapper.inline
    %ul#boxesList.menu.furlable
      %li.current= t('catalogue.titles.lists')
      - current_user.boxes.each do |box|
        - unless %w(collection wishlist giveaway).include? box.slug
          %li.notCurrent
            = link_to  collect_path(@polish.id, box: box.slug), id: box.slug + 'List', method: :post, remote: true do
              = box.name
              - is_in = box.box_items.detect{|item| item.polish_id == @polish.id}
              <svg class='icon isOk check' #{"style='visibility:hidden'" unless is_in}><use xlink:href='#check' /></svg>
              <svg class='icon isOk plus' #{"style='visibility:hidden'" if is_in}><use xlink:href='#plus' /></svg>
      %li.formLi        
        = form_tag collect_path(@polish.id), class: 'menuForms', remote: true do
          .table.wide100
            .cell.wide100
              = text_field_tag :box, nil,  autocomplete: 'off', placeholder: t('placeholder.new_list'), class: 'wide100 inline'
            .cell
              = button_tag class: 'inline noWrap' do
                <svg class='icon '><use xlink:href='#plus' /></svg>
      <svg class='icon linkLike switch' data-activate='#boxesList'><use xlink:href='#x'/></svg>        
    <svg class='icon iPolish linkLike switch hoverBack' data-activate='#boxesList'><use xlink:href='#scroll' /></svg>
